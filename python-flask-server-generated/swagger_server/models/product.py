# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, description: str=None, price: float=None, stock: int=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param id: The id of this Product.  # noqa: E501
        :type id: str
        :param name: The name of this Product.  # noqa: E501
        :type name: str
        :param description: The description of this Product.  # noqa: E501
        :type description: str
        :param price: The price of this Product.  # noqa: E501
        :type price: float
        :param stock: The stock of this Product.  # noqa: E501
        :type stock: int
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'description': str,
            'price': float,
            'stock': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'price': 'price',
            'stock': 'stock'
        }
        self._id = id
        self._name = name
        self._description = description
        self._price = price
        self._stock = stock

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Product.


        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Product.


        :param id: The id of this Product.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Product.


        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Product.


        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Product.


        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def price(self) -> float:
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: float
        """

        self._price = price

    @property
    def stock(self) -> int:
        """Gets the stock of this Product.


        :return: The stock of this Product.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock: int):
        """Sets the stock of this Product.


        :param stock: The stock of this Product.
        :type stock: int
        """

        self._stock = stock
